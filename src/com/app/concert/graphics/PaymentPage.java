/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package concertdb;

import bo.Concert2;
import bo.Seat2;
import bo.Section;
import bo.Section2;
import bo.User;
import dao.ConcertHandler;
import dao.SeatHandler;
import dao.SectionHandler;
import dao.TicketHandler;
import dao.UserHandler;
import dao.VenueHandler;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kohner Smith
 */
public class PaymentPage extends BaseWindow {

	private User u;
	
    /**
     * Creates new form PaymentPage2
     */
    public PaymentPage(Concert2 concert, User u) {
    	
    	this.u = u;
    	
    	setTitle("Payment");
        initComponents();
        this.concert = concert;
        populateSection();
        populateConcertInfo();
        populateSeats();
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaymentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaymentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaymentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaymentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackGroundPanel = new javax.swing.JPanel();
        ConcertNamePHLabel = new javax.swing.JLabel();
        ConcertDatePHLabel = new javax.swing.JLabel();
        ConcertVenuePHLabel = new javax.swing.JLabel();
        ConcertArtistPHLabel = new javax.swing.JLabel();
        ConcertPricePHLabel = new javax.swing.JLabel();
        SectionComboBox = new javax.swing.JComboBox<>();
        SeatComboBox = new javax.swing.JComboBox<>();
        ConcertDetailsLabel = new javax.swing.JLabel();
        ConcertNameLabel = new javax.swing.JLabel();
        ConcertPriceLabel = new javax.swing.JLabel();
        ConcertVenueLabel = new javax.swing.JLabel();
        ConcertDateLabel = new javax.swing.JLabel();
        ConcertArtistLabel = new javax.swing.JLabel();
        SelectSectionLabel = new javax.swing.JLabel();
        SelectSeatLabel = new javax.swing.JLabel();
        PurchaseButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        CardLabel = new javax.swing.JLabel();
        CardTextfield = new javax.swing.JTextField();
        EmailLabel = new javax.swing.JLabel();
        EmailTextfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BackGroundPanel.setBackground(new java.awt.Color(92, 64, 51));

        ConcertNamePHLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertNamePHLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertNamePHLabel.setText("ConcertNamePH");

        ConcertDatePHLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertDatePHLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertDatePHLabel.setText("ConcertDatePH");

        ConcertVenuePHLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertVenuePHLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertVenuePHLabel.setText("ConcertVenuePH");

        ConcertArtistPHLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertArtistPHLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertArtistPHLabel.setText("ConcertArtistPH");

        ConcertPricePHLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertPricePHLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertPricePHLabel.setText("ConcertPricePH");

        SectionComboBox.setBackground(new java.awt.Color(255, 222, 50));
        SectionComboBox.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SectionComboBox.setForeground(new java.awt.Color(92, 64, 51));
        SectionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        SeatComboBox.setBackground(new java.awt.Color(255, 222, 50));
        SeatComboBox.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        SeatComboBox.setForeground(new java.awt.Color(92, 64, 51));
        SeatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ConcertDetailsLabel.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        ConcertDetailsLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertDetailsLabel.setText("Concert Details:");

        ConcertNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertNameLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertNameLabel.setText("Name:");

        ConcertPriceLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertPriceLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertPriceLabel.setText("Price:");

        ConcertVenueLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertVenueLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertVenueLabel.setText("Venue:");

        ConcertDateLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertDateLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertDateLabel.setText("Date:");

        ConcertArtistLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConcertArtistLabel.setForeground(new java.awt.Color(255, 222, 50));
        ConcertArtistLabel.setText("Artist:");

        SelectSectionLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        SelectSectionLabel.setForeground(new java.awt.Color(255, 222, 50));
        SelectSectionLabel.setText("Select Section:");

        SelectSeatLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        SelectSeatLabel.setForeground(new java.awt.Color(255, 222, 50));
        SelectSeatLabel.setText("Select Seat:");

        PurchaseButton.setBackground(new java.awt.Color(255, 222, 50));
        PurchaseButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        PurchaseButton.setForeground(new java.awt.Color(92, 64, 51));
        PurchaseButton.setText("Purchase");
        PurchaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	
            	try {
            		Integer.parseInt(CardTextfield.getText());
            		PurchaseButtonActionPerformed(evt);
            	}
            	catch (NumberFormatException e) {
            		JOptionPane.showMessageDialog(rootPane, "Invalid card number.");
            	}
            }
        });

        RefreshButton.setBackground(new java.awt.Color(255, 222, 50));
        RefreshButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        RefreshButton.setForeground(new java.awt.Color(92, 64, 51));
        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        CardLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        CardLabel.setForeground(new java.awt.Color(255, 222, 50));
        CardLabel.setText("Card #:");

        CardTextfield.setBackground(new java.awt.Color(255, 222, 50));
        CardTextfield.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        CardTextfield.setForeground(new java.awt.Color(92, 64, 51));

        EmailLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        EmailLabel.setForeground(new java.awt.Color(255, 222, 50));
        EmailLabel.setText("Email:");

        EmailTextfield.setBackground(new java.awt.Color(255, 222, 50));
        EmailTextfield.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        EmailTextfield.setForeground(new java.awt.Color(92, 64, 51));
        EmailTextfield.setText(u.getUserEmail());
        EmailTextfield.setEnabled(false);

        javax.swing.GroupLayout BackGroundPanelLayout = new javax.swing.GroupLayout(BackGroundPanel);
        BackGroundPanel.setLayout(BackGroundPanelLayout);
        BackGroundPanelLayout.setHorizontalGroup(
            BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackGroundPanelLayout.createSequentialGroup()
                .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(BackGroundPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackGroundPanelLayout.createSequentialGroup()
                                .addComponent(ConcertArtistPHLabel)
                                .addGap(88, 88, 88))
                            .addGroup(BackGroundPanelLayout.createSequentialGroup()
                                .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ConcertVenueLabel)
                                    .addComponent(ConcertDetailsLabel)
                                    .addComponent(ConcertArtistLabel)
                                    .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(BackGroundPanelLayout.createSequentialGroup()
                                            .addComponent(ConcertPriceLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ConcertPricePHLabel))
                                        .addGroup(BackGroundPanelLayout.createSequentialGroup()
                                            .addComponent(ConcertDateLabel)
                                            .addGap(59, 59, 59)
                                            .addComponent(ConcertDatePHLabel)))
                                    .addGroup(BackGroundPanelLayout.createSequentialGroup()
                                        .addComponent(ConcertNameLabel)
                                        .addGap(51, 51, 51)
                                        .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ConcertNamePHLabel)
                                            .addComponent(ConcertVenuePHLabel))))
                                .addGap(86, 86, 86)))
                        .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CardLabel)
                            .addComponent(SectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SelectSectionLabel)
                            .addComponent(SelectSeatLabel)
                            .addGroup(BackGroundPanelLayout.createSequentialGroup()
                                .addComponent(SeatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(RefreshButton))
                            .addComponent(EmailLabel)
                            .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(EmailTextfield, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                .addComponent(CardTextfield, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addGroup(BackGroundPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PurchaseButton)))
                .addGap(35, 35, 35))
        );
        BackGroundPanelLayout.setVerticalGroup(
            BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackGroundPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConcertDetailsLabel)
                    .addComponent(SelectSectionLabel))
                .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(BackGroundPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(SectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SelectSeatLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SeatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RefreshButton))
                        .addGap(25, 25, 25)
                        .addComponent(CardLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(BackGroundPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConcertNamePHLabel)
                            .addComponent(ConcertNameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConcertVenueLabel)
                            .addComponent(ConcertVenuePHLabel))
                        .addGap(18, 18, 18)
                        .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConcertPricePHLabel)
                            .addComponent(ConcertPriceLabel))
                        .addGap(20, 20, 20)))
                .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CardTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConcertDateLabel)
                    .addComponent(ConcertDatePHLabel))
                .addGap(18, 18, 18)
                .addGroup(BackGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConcertArtistLabel)
                    .addComponent(ConcertArtistPHLabel)
                    .addComponent(EmailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EmailTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(PurchaseButton)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackGroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackGroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        populateSeats();
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void PurchaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurchaseButtonActionPerformed
    		String name = ConcertNamePHLabel.getText();
            String cardNo = CardTextfield.getText();
            float tPrice = Float.parseFloat(ConcertPricePHLabel.getText());
            Section2 selectedSection = (Section2) SectionComboBox.getSelectedItem();
            int sectionNo = selectedSection.getSectionNo2();
            Seat2 selectedSeat = (Seat2) SeatComboBox.getSelectedItem();
            int seatNo = selectedSeat.getSeatNo();
            int userId = new UserHandler().getID2(EmailTextfield.getText());
            int vId = new VenueHandler().getID(ConcertVenuePHLabel.getText());
            
            System.out.print(userId);
            
            if (new TicketHandler().exists(name, sectionNo, seatNo) == false) {
            	int ret = new TicketHandler().addTicket(userId, name, sectionNo, seatNo, vId, tPrice, CardTextfield.getText());
            }
            else {
            	JOptionPane.showMessageDialog(this, "This seat has already been purchased.");
            }
    }//GEN-LAST:event_PurchaseButtonActionPerformed
        List<Section2> sections;
        private void populateSection(){
            sections = new SectionHandler().getSection2(concert.getvName());
            ComboBoxModel ModelComboBox = new DefaultComboBoxModel(sections.toArray());
            SectionComboBox.setModel(ModelComboBox);
    }
        List<Seat2> seats;
        private void populateSeats(){
            Section2 selectedSection = (Section2) SectionComboBox.getSelectedItem();
            int sectionNo = selectedSection.getSectionNo2();
            seats = new SeatHandler().getSeat(sectionNo, concert.getvName());
            ComboBoxModel ModelComboBox = new DefaultComboBoxModel(seats.toArray());
            SeatComboBox.setModel(ModelComboBox);
    }
         
    private Concert2 concert;
    private void populateConcertInfo(){
        ConcertNamePHLabel.setText(concert.getName());
        ConcertVenuePHLabel.setText(concert.getvName());
        ConcertPricePHLabel.setText(String.valueOf(concert.getPrice()));
        ConcertDatePHLabel.setText(concert.getDate());
        ConcertArtistPHLabel.setText(concert.getUserName());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BackGroundPanel;
    private javax.swing.JLabel CardLabel;
    private javax.swing.JTextField CardTextfield;
    private javax.swing.JLabel ConcertArtistLabel;
    private javax.swing.JLabel ConcertArtistPHLabel;
    private javax.swing.JLabel ConcertDateLabel;
    private javax.swing.JLabel ConcertDatePHLabel;
    private javax.swing.JLabel ConcertDetailsLabel;
    private javax.swing.JLabel ConcertNameLabel;
    private javax.swing.JLabel ConcertNamePHLabel;
    private javax.swing.JLabel ConcertPriceLabel;
    private javax.swing.JLabel ConcertPricePHLabel;
    private javax.swing.JLabel ConcertVenueLabel;
    private javax.swing.JLabel ConcertVenuePHLabel;
    private javax.swing.JLabel EmailLabel;
    private javax.swing.JTextField EmailTextfield;
    private javax.swing.JButton PurchaseButton;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JComboBox<String> SeatComboBox;
    private javax.swing.JComboBox<String> SectionComboBox;
    private javax.swing.JLabel SelectSeatLabel;
    private javax.swing.JLabel SelectSectionLabel;
    // End of variables declaration//GEN-END:variables
}
